{
  "account": {
    "active": "Active",
    "available": "Available",
    "balanceDistribution": "Balance Distribution",
    "cantLoadDetails": "Unfortunately we couldn't load the account details at this time. Please try again later.",
    "debonding": "Debonding",
    "emptyTokenList": "This account holds no {{spec}} {{description}}.",
    "emptyAccountTransactionList": "There are no transactions on record for this account.",
    "emptyTransactionList": "No transactions found.",
    "emptyTokenTransferList": "There are no token transfers on record for this account.",
    "failedToLookUpTickers": "We don't have the price for: {{tickers}}",
    "firstActivity": "First activity",
    "ERC20": "ERC-20",
    "ERC721": "ERC-721",
    "listTitle": "Accounts",
    "namedByOasis": "Name appointed by Oasis",
    "namedByDeltaDao": "Identified by deltaDAO",
    "namedBySelf": "Name self-acclaimed",
    "noTokens": "This account holds no tokens",
    "noBalances": "This account currently has no balances.",
    "notStaking": "There are currently no active delegations.",
    "notDebonding": "There are no debonding delegations for this account.",
    "showMore": "+ {{counter}} more",
    "sizeTooltip": "This account is indicated as an {{size}} account based on sum of assets they own.",
    "startStaking": "Start staking now",
    "title": "Account",
    "totalBalance": "Total Balance",
    "totalValue": "Total {{value}}"
  },
  "activeAccounts": {
    "title": "Active Accounts",
    "tooltip": "{{value, number}} accounts"
  },
  "analyticsConsent": {
    "privacyPolicy": "Privacy Policy",
    "settings": "Privacy settings",
    "text": "At Oasis Foundation we believe in your privacy, so you can choose to browse our site without any tracking or by clicking “{{acceptButtonLabel}}”, you help us to improve our site and help us grow our ecosystem. View our <PrivacyPolicyLink>Privacy Policy</PrivacyPolicyLink> for more information.",
    "blockedText": "Our analytics tracking failed to load. Therefore, you will continue using the site with user tracking disabled. If you are willing to accept tracking please pause your adblocker and reload the page to accept tracking. View our <PrivacyPolicyLink>Privacy Policy</PrivacyPolicyLink> for more information.",
    "acceptButtonLabel": "Accept",
    "declineButtonLabel": "Decline",
    "reloadButtonLabel": "Reload page",
    "closeButtonLabel": "Close"
  },
  "blocks": {
    "latest": "Latest Blocks",
    "title": "Blocks",
    "viewingFirst": "You are viewing the first block",
    "viewingLatest": "You are viewing the latest block",
    "viewNext": "View next block",
    "viewPrevious": "View previous block"
  },
  "block": {
    "gasUsed": "{{value, number}} | {{percentage, number}}",
    "unlimited": "(unlimited)"
  },
  "banner": {
    "buildStaging": "Please note this is an internal launch meant to gather your feedback.",
    "buildPreview": "Please note this is an experimental build of {{appTitle}} and that data that is shown might be incorrect."
  },
  "clipboard": {
    "label": "Copy to clipboard",
    "success": "Copied!"
  },
  "coinGeckoReferral": "Data from <CoinGeckoLink>CoinGecko</CoinGeckoLink>",
  "common": {
    "address": "Address",
    "age": "Age",
    "amount": "Amount",
    "balance": "Balance",
    "block": "Block",
    "blockSizeLimit": "Block size limit",
    "bytes": "{{value, number}}",
    "cancel": "Cancel",
    "collection": "Collection",
    "copy": "Copy",
    "data": "Data",
    "debonding": "Debonding",
    "description": "Description",
    "details": "Details",
    "emerald": "Emerald",
    "epoch": "Epoch",
    "cipher": "Cipher",
    "consensus": "Consensus",
    "eth": "ETH",
    "events": "Events",
    "failed": "Failed",
    "fiatValue": "Fiat Value",
    "fiatValueInUSD": "{{value, currency}}",
    "fill": "Fill",
    "for": "For",
    "formattedBlockTimestamp": "{{timestamp, dateTime}} ({{distance}})",
    "formattedDateTime": "{{timestamp, dateTime}}",
    "from": "From",
    "gasUsed": "Gas Used",
    "gasLimit": "Gas Limit",
    "gasPrice": "Gas Price",
    "hash": "Hash",
    "height": "Height",
    "hide": "Hide",
    "id": "ID",
    "invalidVotes": "Invalid votes",
    "layer": "Layer",
    "localnet": "Localnet",
    "loadMore": "Load more",
    "lessThanAmount": "&lt; {{value, number}} <TickerLink />",
    "missing": "n/a",
    "module": "module",
    "name": "Name",
    "network": "Network",
    "nft": "NFT",
    "nfts": "NFTs",
    "nodeId": "Node ID",
    "nodeAddress": "Node Address",
    "nonce": "Nonce",
    "not_defined": "Not defined",
    "oasis": "Oasis",
    "owned": "Owned",
    "paratime": "Paratime",
    "parentheses": "({{subject}})",
    "partial_success": "Partial Success",
    "percentage": "Percentage",
    "proposal": "Proposal",
    "proposer": "Proposer",
    "rank": "Rank",
    "rofl": "ROFL",
    "seeMore": "See more",
    "select": "Select",
    "size": "Size",
    "sapphire": "Sapphire",
    "shares": "Shares",
    "show": "Show",
    "smartContract": "Smart Contract",
    "smartContract_short": "Contract",
    "staked": "Staked",
    "stateRoot": "State Root",
    "staking": "Staking",
    "submitter": "Submitter",
    "success": "Success",
    "status": "Status",
    "ticker": "Ticker",
    "timestamp": "Timestamp",
    "title": "Title",
    "to": "To",
    "token": "Token",
    "tokenName": "Token Name",
    "tokenInstance": "TokenID [<InstanceLink />] <TickerLink/>",
    "tokens": "Tokens",
    "totalVotes": "Total votes",
    "transactions": "Transactions",
    "transactionAbbreviation": "Txs",
    "fee": "Fee",
    "feeProxy": "Fee proxy",
    "feeProxyTooltip": "Account paying for the transaction fee on behalf of the caller",
    "transfers": "Transfers",
    "type": "Type",
    "quantity": "Quantity",
    "unknown": "Unknown",
    "valueLong": "{{value, number}}",
    "valueInToken": "{{value, number}} {{ticker}}",
    "roundedValueInToken": "{{value, number}}… <TickerLink />",
    "valueInTokenWithLink": "{{value, number}} <TickerLink />",
    "view": "View",
    "viewAll": "View all",
    "visitRoseApp": "Visit ROSE app",
    "vote": "Vote",
    "voter": "Voter",
    "votes": "Votes",
    "online": "Online",
    "outOfDate": "Indexing out of date",
    "recipient": "Recipient",
    "mainnet": "Mainnet",
    "testnet": "Testnet",
    "valuePair": "{{value, number}}"
  },
  "contract": {
    "code": "Code",
    "contractMetadata": "Contract Metadata",
    "copyButton": "Copy {{subject}}",
    "creationByteCode": "Creation ByteCode",
    "creator": "Creator",
    "createdAt": "at",
    "name": "Contract name",
    "noCode": "There is no bytecode on record for this account. (Are you sure this is a contract?)",
    "title": "Contract",
    "runtimeByteCode": "Runtime ByteCode",
    "sourceCode": "Contract Source Code",
    "verification": {
      "title": "Verification",
      "isVerified": "Verified",
      "isNotVerified": "Unverified",
      "isPartiallyVerified": "Partially Verified",
      "openInAbiPlayground": "Interact in <AbiPlaygroundLink>ABI Playground</AbiPlaygroundLink>",
      "openInSourcify": "Open in <SourcifyLink>Sourcify</SourcifyLink>",
      "source": "Source",
      "sourceShort": "Src",
      "verifyInSourcify": "Verify through <SourcifyLink>Sourcify</SourcifyLink>",
      "explainVerificationDelay": "If you have just verified a contract, it should take a few minutes to update here.",
      "proxyERC1167": "ERC-1167 proxy to"
    }
  },
  "consensusSnapshot": {
    "blockHeight": "Block Height <BlockHeight />",
    "title": "Consensus Snapshot",
    "totalCirculation": "This is <StakedPercentage /> of the total circulation"
  },
  "currentEpoch": "Current Epoch",
  "networkProposal": {
    "close": "Closed",
    "closeTooltip": "Voting ended on epoch shown.",
    "create": "Created",
    "createTooltip": "Voting created on epoch shown.",
    "deposit": "Deposit",
    "failedToLoadAllVotes": "Failed to load all the votes, number might be incomplete!",
    "thereAreNoVotes": "No votes have been registered.",
    "handler": "Title",
    "id": "ID",
    "listTitle": "Network Change Proposals",
    "state": {
      "active": "Active",
      "failed": "Failed",
      "passed": "Passed",
      "rejected": "Rejected"
    },
    "searchForVoter": "Search for voter",
    "type": {
      "upgrade": "Upgrade",
      "parameterUpgrade": "Parameter upgrade",
      "cancellation": "Cancellation"
    },
    "vote": {
      "yes": "Yes",
      "no": "No",
      "abstain": "Abstained",
      "all": "All votes"
    }
  },
  "nft": {
    "accountCollection": "ERC-721 Tokens",
    "collectionLink": "Collection: <CollectionLink />",
    "instanceIdLink": "ID: <InstanceLink />",
    "instanceTokenId": "Token ID",
    "instanceTitleSuffix": "(NFT Instance)",
    "imagePreview": "Image preview",
    "metadata": "Metadata",
    "noMetadata": "There is no metadata on record for this NFT.",
    "noPreview": "No preview available",
    "openInFullscreen": "Open in fullscreen",
    "openInNewTab": "Open in a new tab",
    "owner": "Owner",
    "switchBackgroundColor": "Switch between dark and light background"
  },
  "nodes": {
    "title": "Active nodes",
    "unknown": "Consensus layer indexer is not caught up with the latest blocks. The number of active nodes is unknown.",
    "tooltip": "Blockchain nodes are authorized devices that track the distributed ledger and serve as communication hubs in the network.",
    "value": "{{value, number}}"
  },
  "errors": {
    "code": "error code",
    "module": "module",
    "error": "Error",
    "loadFirstPage": "load the first page",
    "unknown": "Unknown error",
    "unsupportedLayer": "Unsupported layer",
    "unsupportedNetwork": "Unsupported network",
    "invalidAddress": "Invalid address",
    "invalidRoflAppId": "Invalid ROFL app ID",
    "invalidBlockHeight": "Invalid block height",
    "invalidPageNumber": "Invalid page number",
    "invalidProposalId": "Invalid proposal ID",
    "invalidTxHash": "Invalid transaction hash",
    "notFoundBlockHeight": "Block not found",
    "notFoundTx": "Transaction not found",
    "notFoundRoflApp": "ROFL app not found",
    "notFoundRoflAppReplica": "ROFL app replica not found",
    "notFoundProposal": "Proposal not found",
    "pageDoesNotExist": "The page you are looking for does not exist.",
    "validateURL": "Please validate provided URL",
    "validateURLOrGoToFirstPage": "Please check the URL or <FirstPageLink />.",
    "invalidUrl": "This URL doesn't exist",
    "invalidVote": "Invalid vote",
    "alternativelyGoExplore": "Alternatively, discover our ecosystem by exploring Oasis.",
    "revertedWithoutMessage": "reverted without a message",
    "storage": "Access to browser storage denied"
  },
  "footer": {
    "mobileTitle": "OPF",
    "title": "Oasis Protocol Foundation",
    "version": "Version: <ReleaseLink>{{version}}</ReleaseLink> (commit: <CommitLink>{{sha}}</CommitLink>) built at {{buildTime}}",
    "apiDocs": "API Documentation",
    "github": "GitHub"
  },
  "learningMaterials": {
    "consensus": {
      "delegation": "How to stake and delegate your tokens?",
      "delegationDescription": "The Oasis Network is a proof-of-stake network. This means that the voting power of an entity in the network is determined by the amount of tokens staked to that entity.",
      "description": "Oasis Core is designed around the principle of modularity. The consensus layer is an interface that provides a number of important services to other parts of Oasis Core.",
      "header": "What is the Consensus layer?",
      "manageRose": "How to manage your ROSE tokens?",
      "manageRoseDescription": "You can transfer tokens from your account to another...",
      "node": "How to become a validator?",
      "nodeDescription": "Anyone can run a node - learn about the pre-requisites.",
      "tokenomics": "ROSE and Tokenomics",
      "tokenomicsDescription": "At the heart of the Oasis network is its native ecosystem token: ROSE.",
      "validators": "What are validators?",
      "validatorsDescription": "Each node operator directly contributes to increasing the Oasis Network’s decentralization."
    },
    "emerald": {
      "header": "What is the Emerald network?",
      "description": "The Emerald ParaTime is our official EVM Compatible ParaTime providing smart contract environment with full EVM compatibility.",
      "gateway": "Web3 Gateway",
      "gatewayDescription": "To get started building on our Emerald ParaTime, you can use our public Web3 gateway, fully compatible with Ethereum's Web3 gateway."
    },
    "sapphire": {
      "header": "What is the Sapphire network?",
      "description": "The Sapphire ParaTime is our official confidential EVM Compatible ParaTime providing a smart contract development environment with EVM compatibility."
    },
    "header": "Learning materials",
    "hardhat": {
      "header": "Add the {{ layer }} Testnet to Hardhat",
      "description": "Open up your hardhat.config.ts and drop in these lines."
    },
    "pontusxdevnet": {
      "1": {
        "header": "What is the Pontus-X Network?",
        "description": "The Pontus-X Network is our official confidential EVM Compatible ParaTime offering a smart contract development environment that is compatible with the Ethereum Virtual Machine (EVM) focused on building a Federated Data Economy."
      },
      "2": {
        "header": "Devnet Parameters",
        "description": "The Devnet for Pontus-X may undergo frequent version upgrades."
      },
      "3": {
        "header": "Adding the Pontus-X Devnet to Hardhat",
        "description": "To integrate with Pontus-X devnet, open your hardhat.config.ts file and insert the following configurations."
      }
    },
    "pontusxtestnet": {
      "1": {
        "header": "What is the Pontus-X Network?",
        "description": "The Pontus-X Network is our official confidential EVM Compatible ParaTime offering a smart contract development environment that is compatible with the Ethereum Virtual Machine (EVM) focused on building a Federated Data Economy."
      },
      "2": {
        "header": "Testnet Parameters",
        "description": "The Testnet for Pontus-X may undergo frequent version upgrades."
      },
      "3": {
        "header": "Adding the Pontus-X Testnet to Hardhat",
        "description": "To integrate with Pontus-X testnet, open your hardhat.config.ts file and insert the following configurations."
      }
    },
    "token": {
      "header": "Token Metrics and Distribution",
      "description": "Rose is the currency powering the Oasis network."
    },
    "testnet": {
      "header": "Testnet parameters",
      "description": "The Testnet may be subject to frequent version upgrades."
    },
    "localnet": {
      "header": "Localnet",
      "description": "Convenient development and testing of your dApps."
    },
    "tools": {
      "header": "Tools & Services",
      "description": "Oasis integrates with a number of services and provides tooling support for developers."
    },
    "transfer": {
      "header": "How to Transfer ROSE into a ParaTime?",
      "description": "Rose is the currency powering the {{layer}} network."
    }
  },
  "pageHeader": {
    "ribbon": "You are viewing {{network}} data"
  },
  "pagination": {
    "first": "First",
    "last": "Last"
  },
  "social": {
    "description": "Be part of the community and stay in the loop on everything Oasis",
    "discord": "Discord",
    "header": "Join us",
    "reddit": "Reddit",
    "telegram": "Telegram",
    "twitter": "X",
    "youtube": "Youtube",
    "linkedin": "LinkedIn",
    "docs": "Documentation",
    "home": "Home"
  },
  "table": {
    "headers": {
      "dateTime": {
        "title": "Date/Time",
        "tooltipTitle": "Show in Age format"
      },
      "age": {
        "tooltipTitle": "Show in Date Time format"
      }
    }
  },
  "tableLayoutButton": {
    "changeView": "Change view"
  },
  "testnetFaucet": {
    "description": "Drops are limited to 150 TEST tokens",
    "header": "Oasis Testnet Faucet",
    "request": "Request test tokens"
  },
  "tokens": {
    "typeDescription": "{{description}} ({{spec}})",
    "emptyInventory": "Token has no inventory associated with it.",
    "emptyTokenHolderList": "There are no holders on record for this token.",
    "holders": "Holders",
    "holdersValue": "{{ value, number }}",
    "holdersCount": "Holders Count",
    "inventory": "Inventory",
    "originTooltip": "This token originates from <strong>{{origin}}</strong>",
    "totalSupply": "Total Supply",
    "totalSupplyValue": "{{ value, number }} {{ticker}}",
    "transferEventType": {
      "erc20Transfer": "ERC-20 token transfer",
      "transfer": "Transfer",
      "approval": "Approval",
      "minting": "Minting",
      "burning": "Burning",
      "unavailable": "Unknown token transfer event"
    },
    "type": "Token Type"
  },
  "tokenSnapshot": {
    "header": "Token Snapshot"
  },
  "tokenPrice": {
    "header": "{{ticker}} Price"
  },
  "totalTransactions": {
    "header": "Total Transactions",
    "tooltip": "{{value, number}} total transactions"
  },
  "transactions": {
    "encryption": {
      "dataNonce": "Data Nonce",
      "encryptedData": "Data (encrypted)",
      "encryptedResult": "Result (encrypted)",
      "format": "Format",
      "plain": "Plain",
      "publicKey": "Public Key",
      "resultNonce": "Result Nonce"
    },
    "filterByMethod": "Filter by method",
    "latest": "Latest Transactions",
    "method": {
      "stakingBurn": "Burn",
      "stakingTransfer": "Transfer",
      "stakingAddEscrow": "Start Delegate",
      "stakingReclaimEscrow": "Start Undelegate",
      "stakingAmendCommissionSchedule": "Amend Commission Schedule",
      "stakingAllow": "Allowance Change",
      "stakingWithdraw": "Withdraw from Allowance",
      "registryDeregisterEntity": "Deregister Entity",
      "registryUnfreezeNode": "Registry: Unfreeze Node",
      "roothashExecutorCommit": "Executor Commit",
      "roothashEvidence": "RootHash Evidence",
      "roothashSubmitMessage": "RootHash: Submit Message",
      "roothashExecutorProposerTimeout": "Executor Proposer Timeout",
      "registryProveFreshness": "Registry: Prove Freshness",
      "registryRegisterEntity": "Register Entity",
      "registryRegisterNode": "Register Node",
      "registryRegisterRuntime": "Register Runtime",
      "governanceCastVote": "Cast Vote",
      "governanceSubmitProposal": "Submit Proposal",
      "beaconPVSSCommit": "PVSSCommit",
      "beaconPVSSReveal": "PVSSReveal",
      "beaconVRFProve": "VRFProve",
      "accounts": {
        "transfer": "Transfer"
      },
      "consensus": {
        "deposit": "Deposit from Consensus",
        "delegate": "Start Delegate",
        "meta": "Consensus Meta",
        "undelegate": "Start Undelegate",
        "withdraw": "Withdraw to Consensus"
      },
      "evm": {
        "call": "Contract Call",
        "create": "Contract Creation"
      },
      "keyManager": {
        "churp": {
          "apply": "Key Manager: Churp Apply",
          "confirm": "Key Manager: Churp Confirm",
          "create": "Key Manager: Churp Create",
          "update": "Key Manager: Churp Update"
        },
        "publishEphemeralSecret": "Key Manager: Publish Ephemeral Secret",
        "publishMasterSecret": "Key Manager: Publish Master Secret",
        "updatePolicy": "Key Manager: Update Policy"
      },
      "rofl": {
        "create": "ROFL Create",
        "register": "ROFL Register",
        "remove": "ROFL Remove",
        "update": "ROFL Update"
      },
      "roflmarket": {
        "providerCreate": "ROFL Market Provider Create",
        "providerUpdate": "ROFL Market Provider Update",
        "providerUpdateOffers": "ROFL Market Provider Update Offers",
        "providerRemove": "ROFL Market Provider Remove",
        "machineCreate": "ROFL Market Machine Create",
        "machineTopUp": "ROFL Market Machine Top Up",
        "machineCancel": "ROFL Market Machine Cancel",
        "machineExecuteCmds": "ROFL Market Machine Execute Commands",
        "machineChangeAdmin": "ROFL Market Machine Change Admin"
      },
      "vault": {
        "authorizeAction": "Vault: Authorize Action",
        "cancelAction": "Vault: Cancel Action",
        "create": "Vault: Create"
      }
    }
  },
  "transaction": {
    "delegate": "Delegate",
    "deposit": "Deposit",
    "eventsSummary": "Summary",
    "header": "Transaction",
    "rawData": "Raw Data",
    "started": "Started",
    "startedDescription": "{{ method }} has started, final result will be known in the next block",
    "tooltips": {
      "txEncrypted": "This transaction is encrypted.",
      "txNotEncrypted": "This transaction is <strong>not</strong> encrypted."
    },
    "undelegate": "Undelegate",
    "warningMultipleTransactionsSameHash": "Please make sure you're looking at the right transaction. There is more than one transaction with this hash, which is extremely rare. We are showing the most recent successful one.",
    "withdraw": "Withdraw"
  },
  "event": {
    "cantLoadEvents": "Unfortunately we couldn't load the list of events. Please try again later.",
    "cantFindMatchingEvents": "We can't find any matching events.",
    "filterByType": "Filter by type",
    "noEvents": "No events",
    "fields": {
      "emittingTransaction": "Transaction"
    }
  },
  "consensusEvent": {
    "governanceProposalExecuted": "Governance Proposal Executed",
    "governanceProposalFinalized": "Governance Proposal Finalized",
    "governanceProposalSubmitted": "Governance Proposal Submitted",
    "governanceVote": "Governance Vote Submitted",
    "registryEntity": "Entity Registered",
    "registryNodeUnfrozen": "Node Unfrozen",
    "registryNode": "Node Registered",
    "registryRuntime": "Runtime Registered",
    "registryRuntimeSuspended": "Runtime Suspended",
    "roothashExecution_discrepancy": "Discrepancy Detected",
    "roothashExecutorCommitted": "Runtime Executor Committed",
    "roothashFinalized":  "Runtime Round Finalized",
    "roothashMessage": "Runtime Message Emitted",
    "roothashInMsgProcessed": "Incoming Runtime Message Processed",
    "stakingAllowanceChange": "Allowance Changed",
    "stakingBurn": "Burn",
    "stakingEscrowAdd": "Delegate",
    "stakingEscrowDebondingStart": "Start to undelegate",
    "stakingEscrowReclaim": "Undelegate finished",
    "stakingEscrowTake": "Stake Slashed",
    "stakingTransfer": "Transfer"
  },
  "runtimeEvent": {
    "accountsburn": "Tokens burnt",
    "accountsmint": "Tokens minted",
    "accountstransfer": "Transfer",
    "consensusDeposit": "Deposit from consensus",
    "consensusWithdrawal": "Withdrawal to consensus",
    "consensusDelegate": "Delegate to consensus",
    "consensusUndelegateStart": "Start to undelegate",
    "consensusUndelegateDone": "Undelegate finished",
    "roflAppCreated": "ROFL App Created",
    "roflAppUpdated": "ROFL App Updated",
    "roflAppRemoved": "ROFL App Removed",
    "replicaRegistered": "ROFL Replica Registered",
    "roflmarketProviderCreated": "ROFL Market Provider Created",
    "roflmarketProviderUpdated": "ROFL Market Provider Updated",
    "roflmarketProviderRemoved": "ROFL Market Provider Removed",
    "roflmarketMachineCreated": "ROFL Market Machine Created",
    "roflmarketMachineUpdated": "ROFL Market Machine Updated",
    "roflmarketMachineAccepted": "ROFL Market Machine Accepted",
    "roflmarketMachineCancelled": "ROFL Market Machine Cancelled",
    "roflmarketMachineRemoved": "ROFL Market Machine Removed",
    "roflmarketMachineCommandQueued": "ROFL Market Command Queued",
    "evmLog": "EVM log message",
    "filter": {
      "all": "All events",
      "nonTx": "Non-transactional"
    },
    "gasUsed": "Gas used",
    "fields": {
      "amount": "Amount",
      "data": "Data",
      "emittingContract": "Emitting contract",
      "topics": "Topics",
      "owner": "Owner",
      "activeShares": "Active Shares",
      "debondingShares": "Debonding Shares"
    }
  },
  "transactionStats": {
    "header": "Transactions Per Day",
    "perDay": "{{value}} tx/day",
    "perHour": "{{value}} tx/hour"
  },
  "select": {
    "placeholder": "Select"
  },
  "chartDuration": {
    "pastDay": "Past day",
    "pastWeek": "Past week",
    "pastMonth": "Past month",
    "pastYear": "Past year",
    "year": "Year",
    "week": "Week",
    "month": "Month",
    "lastHour": "Last hour",
    "lastDay": "Last day",
    "lastMonth": "Last month"
  },
  "currentFiatValue": {
    "title": "Current fiat value",
    "explanation": "This figure is calculated using the current rate. The value at the time of transaction might have been different."
  },
  "paraTimeSnapshot": {
    "header": "{{ paratime }} Snapshot"
  },
  "layerPicker": {
    "chainId": "Chain ID:",
    "decimal": "Decimal: {{ id }}",
    "comingSoonTitle": "Coming soon",
    "comingSoonLabel": "(coming soon)",
    "consensus": "The consensus layer is a scalable, high-throughput, secure, proof-of-stake consensus run by a decentralized set of validator nodes.",
    "goToDashboard": "Go to dashboard",
    "hex": "Hex: {{ id }}",
    "hostedOn": "Hosted on {{ network }}",
    "readMore": "Read more about {{ layer }} on {{ network }} in Oasis Docs",
    "rpcHttp": "RPC HTTP endpoint: {{ endpoint }}",
    "rpcWebSockets": "RPC WebSockets endpoint: {{ endpoint }}",
    "active": "(active)",
    "viewNetworks": "View Networks",
    "viewLayers": "View layers",
    "mainnet": {
      "emerald": "The Emerald ParaTime is our official EVM Compatible ParaTime providing smart contract environment with full EVM compatibility.",
      "sapphire": "The Sapphire ParaTime is our official confidential EVM Compatible ParaTime providing a smart contract development environment with EVM compatibility."
    },
    "testnet": {
      "emerald": "The Testnet of the EVM Compatible ParaTime providing a smart contract development environment.",
      "sapphire": "The Testnet of the official confidential EVM Compatible ParaTime providing a smart contract development environment with EVM compatibility.",
      "pontusxdev": "The Devnet of Pontus-X, a confidential EVM Compatible ParaTime offering a smart contract development environment that is compatible with the Ethereum Virtual Machine (EVM) focused on building a Federated Data Economy.",
      "pontusxtest": "The Testnet of Pontus-X, a confidential EVM Compatible ParaTime offering a smart contract development environment that is compatible with the Ethereum Virtual Machine (EVM) focused on building a Federated Data Economy."
    },
    "localnet": {
      "emerald": "The Localnet of the EVM Compatible ParaTime providing a smart contract development environment.",
      "sapphire": "The Localnet of the official confidential EVM Compatible ParaTime providing a smart contract development environment with EVM compatibility."
    }
  },
  "home": {
    "apiOffline": "Our {{ target }} API is offline. We’re trying to reconnect",
    "userOffline": "You are offline. We’re trying to reconnect",
    "indexerOutOfDate": "We don't have fully up-to-date data about our {{ scope }}. The data displayed here might be out of date.",
    "indexerOutOfDateSince": "The last update we have about our {{ scope }} is from {{ lastUpdate }}. The data displayed here might be out of date.",
    "nodeOutOfDateSince": "The explorer's gRPC node has not observed new blocks since {{ lastUpdate }}. Check status.oasis.io.",
    "indexerUnavailable": "Data about {{ scope }} is currently not available. Please check back later.",
    "blocks": "Blocks",
    "exploreBtnText": "Explore Oasis",
    "link": "Oasis Explorer Home",
    "txns": "Txns",
    "zoomOutBtnText": "Zoom out",
    "offline": "Offline",
    "helpScreen": {
      "navigate": "Navigate using your finger",
      "pinch": "Pinch to zoom in and out",
      "tap": "Tap to view info",
      "getStarted": "Get Started",
      "infoIconAria": "Toggle info screen"
    },
    "tooltip": {
      "coming": "Coming soon",
      "openConsensus": "Open Consensus",
      "openParatime": "Open ParaTime",
      "sapphireParaTimeDesc": "Confidential EVM Compatible ParaTime providing a smart contract development environment with EVM compatibility",
      "emeraldParaTimeDesc": "EVM Compatible ParaTime providing smart contract environment with EVM compatibility.",
      "cipherParaTimeDesc": "The Cipher ParaTime is a Confidential ParaTime for executing Wasm smart contracts.",
      "pontusxParaTimeDesc": "Pontus-X ParaTime",
      "consensusDesc": "Our scalable, high-throughput, secure, proof-of-stake consensus layer run by a decentralized set of validator nodes.",
      "close": "Close"
    },
    "selectedNetwork": "Selected network",
    "coming": "Coming",
    "soon": "soon",
    "not": "Not",
    "enabled": "enabled"
  },
  "paratimes": {
    "activeNodes": "{{nodes}} active",
    "blockNumber": "Block number:",
    "inactive": "Coming soon",
    "listTitle": "ParaTimes",
    "noData": "No data available",
    "nodes": "Nodes:",
    "outdated": "Out-of-date",
    "canNotReadStatus": "Can't load status paratime '{{name}}'."
  },
  "pontusx": {
    "devnet": "Pontus-X devnet",
    "testnet": "Pontus-X",
    "testTokens": {
      "description": "Do you need some tokens for testing?",
      "header": "Test tokens",
      "request": "Get Tokens"
    }
  },
  "rofl": {
    "active": "Active",
    "activeReplicas": "Active replicas",
    "adminAccount": "Admin account",
    "appId": "App ID",
    "author": "Author",
    "created": "Date created",
    "description": "Description",
    "emptyReplicasList": "No ROFL app replicas found.",
    "emptyRoflAppsList": "No ROFL apps found.",
    "enclaveId": "Enclave ID",
    "endorsement": "Endorsement",
    "endorsementLabels": {
      "any": "Any node can endorse the enclave",
      "entity": "Node from entity <Address />",
      "node": "Node <Address />",
      "role_compute": "Node has the <i>compute</i> role for the current runtime",
      "role_observer": "Node has the <i>observer</i> role for the current runtime",
      "provider": "Node from provider <Address />",
      "provider_instance_admin": "<Address /> is currently admin on machine",
      "and": "and",
      "or": "or"
    },
    "endorsingNodeAddress": "Endorsing node address",
    "endorsingNodeId": "Endorsing node ID",
    "endorsingNodePays": "Endorsing node pays",
    "evaluation": "TCB data evaluation",
    "expirationEpoch": "Expiration epoch",
    "expired": "Expired",
    "extraKeys": "Extra keys",
    "feePolicy": "Fee policy",
    "homePage": "Homepage",
    "inactive": "Inactive",
    "lastActivity": "Last activity",
    "license": "License",
    "listTitle": "ROFL Apps",
    "metadata": "Meta data",
    "metadataInfo": "This info provided by deployer, Oasis does not verify this information.",
    "min": "(minimum)",
    "nameNotProvided": "Name not provided",
    "noData": "No data available",
    "nodeAddressSwitch": "Show node address",
    "nodeIdSwitch": "Show node ID",
    "policy": "Policy",
    "rak": "Runtime Attestation Key",
    "rakAbbreviation": "RAK",
    "rekAbbreviation": "REK",
    "removed": "Removed",
    "replicaDetails": "Replica details",
    "replicaPays": "Replica pays",
    "replicas": "Replicas",
    "repositoryUrl": "Repository URL",
    "roflAppId": "ROFL App ID",
    "roflName": "ROFL name",
    "searchByNameOrKeyword": "Search by name or keyword",
    "secretLength": "[{{value}} bytes]",
    "secrets": "Secrets",
    "secretsTooltip": "These secrets are end-to-end encrypted and can only be read by the ROFL app.",
    "sekPublicKey": "SEK Public Key",
    "sgx": "SGX",
    "stakedAmount": "Staked amount",
    "tdx": "TDX",
    "tee": "TEE",
    "update": "Update",
    "updates": "Updates",
    "validity": "Validity period",
    "validityPeriodDays": "{{value}} days",
    "verifyCommand": "Run <Command /> to verify.",
    "version": "Version"
  },
  "roflmarket": {
    "provider": "Provider",
    "machineId": "Machine ID"
  },
  "search": {
    "placeholder": "Address, Block, Contract, Transaction hash, Token name, etc.",
    "error": {
      "tooShort": "Please enter either at least 3 characters or a number in order to perform a search.",
      "privacy": "It seems like you might accidentally entered a keyphrase for a wallet. Please note that your mnemonic is a secret key that should never be shared, even not with our {{ appName }}.\nExecuting this search is highly unlikely to return any results."
    },
    "mobilePlaceholder": "Search Address, Block, Txn, Token, etc",
    "noResults": {
      "header": "No results found",
      "scopeHeader": "No results found on {{scope}}",
      "description": "Please try another search query <OptionalBreak> or <HomeLink>explore Oasis</HomeLink>.</OptionalBreak>"
    },
    "otherResults": {
      "clickToShowThem": "We found <strong>{{ countLabel }}</strong> on other <strong>Networks</strong>. Click to open these results.",
      "clickToShowMore": "We also found <strong>{{ countLabel }}</strong> on other <strong>Networks</strong>. Click to open these results.",
      "clickToHide": "The results from other <strong>Networks</strong> are shown below. Click to hide those results."
    },
    "results": {
      "accounts": {
        "title": "Accounts",
        "viewLink": "View Account"
      },
      "blocks": {
        "title": "Blocks",
        "viewLink": "View Block"
      },
      "contracts": {
        "title": "Contracts",
        "viewLink": "View Contract"
      },
      "tokens": {
        "title": "Tokens",
        "viewLink": "View Token"
      },
      "transactions": {
        "title": "Transactions",
        "viewLink": "View Transaction"
      },
      "roflApps": {
        "title": "ROFL",
        "viewLink": "View ROFL App"
      },
      "proposals": {
        "title": "Proposals",
        "viewLink": "View Proposal"
      },
      "validators": {
        "title": "Validators",
        "viewLink": "View Validator"
      },
      "count_one": "1 result",
      "count_other": "{{ count }} results",
      "moreCount_one": "1 more result",
      "moreCount_other": "{{ count }} more results"
    },
    "searchBtnText": "Search",
    "searchSuggestionsForRuntime": "Not sure what to look for? Try out a search: <OptionalBreak><BlockLink><BlockIcon/> Block</BlockLink>, <TransactionLink><TransactionIcon/> Transaction</TransactionLink>, <AccountLink><AccountIcon/> Address</AccountLink>, <TokenLink><TokenIcon/> Token</TokenLink> </OptionalBreak>.",
    "searchSuggestionsForConsensus": "Not sure what to look for? Try out a search: <OptionalBreak><BlockLink><BlockIcon/> Block</BlockLink>, <TransactionLink><TransactionIcon/> Transaction</TransactionLink>, <AccountLink><AccountIcon/> Address</AccountLink> </OptionalBreak>.",
    "suggestSearchForRuntime": "Use search to find what you are looking for, i.e. <OptionalBreak><BlockLink><BlockIcon/> Block</BlockLink>, <TransactionLink><TransactionIcon/> Transaction</TransactionLink>, <AccountLink><AccountIcon/> Address</AccountLink>, <TokenLink><TokenIcon/> Token</TokenLink> </OptionalBreak>.",
    "suggestSearchForConsensus": "Use search to find what you are looking for, i.e. <OptionalBreak><BlockLink><BlockIcon/> Block</BlockLink>, <TransactionLink><TransactionIcon/> Transaction</TransactionLink>, <AccountLink><AccountIcon/> Address</AccountLink> </OptionalBreak>."
  },
  "tableSearch": {
    "error": {
      "tooShort": "Please enter at least 3 characters to perform a search.",
      "tooMany": "Too many words"
    },
    "noMatchingResults": "There are no results matching your filters.",
    "clearFilters": "Clear filters"
  },
  "validator": {
    "active": "Active",
    "amount": "Amount",
    "blockWithHeight": "Block {{height}}",
    "boundsNotSet": "No bounds set (0% - 100%)",
    "change": "Change (24h)",
    "commission": "Commission",
    "commissionBounds": "Commission Bounds",
    "commissionRates": "Commission Rates",
    "cumulativeVoting": "Cumulative Voting %",
    "debondingEnd": "Unlock Epoch",
    "delegations": "Delegations",
    "delegators": "Delegators",
    "emptyDebondingList": "No one is debonding delegations from this validator.",
    "emptyDelegationsList": "No one is delegating to this validator.",
    "entityId": "Entity ID",
    "escrowDistribution": "Escrow Distribution",
    "externalLink": "External Link",
    "externalLinkDescription": "Oasis is not responsible for any content on external pages.",
    "groupStatus": "{{status}} validators",
    "inactive": "Inactive",
    "listTitle": "Validators",
    "missed": "Missed",
    "others": "Others",
    "signed": "Signed",
    "signedBlocks": "Signed Blocks",
    "signedBlocksDescription": "Last 100 blocks",
    "signedBlocksPercentage": "Percentage of blocks signed in the past 24h",
    "proposedBlocks": "Proposed Blocks",
    "snapshot": "Validator Snapshot",
    "self": "Self",
    "shares": "Shares",
    "stakingTrend": "Staking Trend",
    "startDate": "Start Date",
    "title": "Validator",
    "totalEscrow": " Total Escrow (100%)",
    "totalShare": "Total Share",
    "undelegations": "Undelegations",
    "uptime": "Uptime",
    "voting": "Voting %",
    "votingPower": "Voting Power",
    "votingPowerOverall": "in % of overall network",
    "waiting": "Waiting"
  }
}
